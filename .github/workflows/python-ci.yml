name: Python CI/CD

on:
  push:
    branches: ["main", "master", "feature/*", "bugfix/*"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main", "master"]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    # ETAPA DE BUILD E TESTES (para TODAS as branches)
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          #cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          pip install -r requirements.txt pre-commit bandit pytest-cov "twine>=6.1.0" "packaging>=24.2"

      - name: Run tests and checks
        run: |
          python -m build
          twine check dist/*  # Verifica metadados antes do build
          pytest --cov=Mundo01 --cov-report=term-missing

  # ETAPA DE DEPLOY (APENAS para tags e main/master)
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/meu-pacote-python/
    if: >
      (github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/master' ||
      startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        run: |
          python -m pip install build
          python -m build

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      # --- ADICIONE AQUI A VERIFICAÇÃO DE ENCODING ---
      - name: Check README encoding (UTF-8)
        run: |
          echo "Verificando codificação do README.md..."
          file -i README.md  # Mostra o encoding do arquivo
          iconv -f utf-8 -t utf-8 README.md > /dev/null || (echo "❌ README.md não está em UTF-8 válido"; exit 1)
          echo "✅ README.md é UTF-8 válido"

      - name: Check for invalid UTF-8 characters
        run: |
            echo "Verificando arquivos para caracteres UTF-8 inválidos..."
            find . -type f -name "*.md" -o -name "*.py" -o -name "*.txt" | while read file; do
              if ! iconv -f utf-8 -t utf-8 "$file" >/dev/null 2>&1; then
                echo "❌ Erro: $file contém caracteres não-UTF-8"
                exit 1
              fi
            done
            echo "✅ Todos os arquivos são UTF-8 válidos"

      - name: Sanitize metadata
        run: |
          # Garante que o pyproject.toml está correto
          sed -i 's/license-expression.*//' pyproject.toml
          sed -i 's/license-file.*//' pyproject.toml
          echo -e '\nlicense = "MIT"' >> pyproject.toml
          rm -rf dist/ build/ *.egg-info/

      - name: Sanitize files (UTF-8)
        run: |
          find . -type f -name "*.py" -o -name "*.md" -o -name "*.txt" | while read file; do
            iconv -f utf-8 -t utf-8 "$file" > "$file.tmp" && mv "$file.tmp" "$file"
          done

      - name: Build package
        run: |
          python -m build
          unzip -p dist/*.whl */METADATA | grep License:

      - name: Verify files
        run: |
          ls -la dist/
          twine check dist/*  # Verifica metadados antes do deploy

      # --- VERIFICACAO EXTRA ---
      - name: Validate deploy conditions
        run: |
          echo "✅ Branch/tag válido para deploy: ${{ github.ref }}"
        if: >
          github.ref == 'refs/heads/main' ||
          github.ref == 'refs/heads/master' ||
          startsWith(github.ref, 'refs/tags/v')
      # ----------------------------------------

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Publish to TestPyPI  # PASSO 2 - Teste primeiro
        if: github.ref != 'refs/tags/v*'  # Executa apenas em branches
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.PYPI_TOKEN_TEST }}
          skip-existing: true

      - name: Publish to PyPI  # PASSO 3 - Produção
        if: startsWith(github.ref, 'refs/tags/v')  # So em tags
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          skip-existing: true

      - name: Notify team  # PASSO 3 - Notificacao (opcional)
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Versão ${process.env.GITHUB_REF_NAME} publicada!'
            })

      - name: Notify feature/bugfix branch
        if: contains(github.ref, 'feature/') || contains(github.ref, 'bugfix/')
        run: |
          echo "✅ Testes passaram na branch ${{ github.ref }}"
