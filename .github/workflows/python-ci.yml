name: Python CI/CD

on:
  push:
    branches: ["main", "master", "feature/*", "bugfix/*"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main", "master"]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    # ETAPA DE BUILD E TESTES (para TODAS as branches)
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          pip install -r requirements.txt pre-commit bandit pytest-cov twine

      - name: Run tests and checks
        run: |
          python -m build
          twine check dist/*  # Verifica metadados antes do build
          pytest --cov=Munod01 --cov-report=term-missing

  # ETAPA DE DEPLOY (APENAS para tags e main/master)
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/meu-pacote-python/
    if: >
      (github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/master' ||
      startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- VERIFICA√á√ÉO EXTRA ---
      - name: Validate deploy conditions
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" &&
                "${{ github.ref }}" != "refs/heads/master" &&
                ! startsWith(github.ref, 'refs/tags/v') ]]; then
            echo "‚ùå Deploy bloqueado para branch/tag: ${{ github.ref }}"
            exit 1
          fi
          echo "‚úÖ Branch/tag v√°lido para deploy: ${{ github.ref }}"
      # ----------------------------------------

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Publish to TestPyPI  # PASSO 2 - Teste primeiro
        if: github.ref != 'refs/tags/v*'  # Executa apenas em branches
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          skip-existing: true

      - name: Publish to PyPI  # PASSO 3 - Produ√ß√£o
        if: startsWith(github.ref, 'refs/tags/v')  # S√≥ em tags
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          skip-existing: true

      - name: Notify team  # PASSO 3 - Notifica√ß√£o (opcional)
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ Vers√£o ${process.env.GITHUB_REF_NAME} publicada!'
            })

      - name: Notify feature/bugfix branch
        if: contains(github.ref, 'feature/') || contains(github.ref, 'bugfix/')
        run: |
          echo "‚úÖ Testes passaram na branch ${{ github.ref }}"
