name: Python CI/CD

on:
  push:
    branches: ["main", "master", "feature/**"]
    # matching tags like v1.2.3
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main", "master"]
  workflow_dispatch:

jobs:
  # =============== BUILD & TEST ===============
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pre-commit

      - name: Rodar pre-commit
        run: pre-commit run --all-files

      - name: Lint com flake8
        run: flake8 Mundo01 test_all.py

      - name: Check Black
        run: black --check Mundo01 test_all.py

      - name: Check isort
        run: isort --check-only Mundo01 test_all.py

      - name: Executar testes
        run: python test_all.py

  # =============== DEPLOY TO PYPI ===============
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Instalar ferramentas de empacotamento
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build do pacote
        run: python -m build

      - name: Publicar no PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: python -m twine upload dist/*
